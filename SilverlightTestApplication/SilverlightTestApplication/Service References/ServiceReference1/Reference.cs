//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightTestApplication.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataSetData", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    public partial class DataSetData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DataXMLField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.DataTableInfo> TablesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataXML {
            get {
                return this.DataXMLField;
            }
            set {
                if ((object.ReferenceEquals(this.DataXMLField, value) != true)) {
                    this.DataXMLField = value;
                    this.RaisePropertyChanged("DataXML");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.DataTableInfo> Tables {
            get {
                return this.TablesField;
            }
            set {
                if ((object.ReferenceEquals(this.TablesField, value) != true)) {
                    this.TablesField = value;
                    this.RaisePropertyChanged("Tables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataTableInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    public partial class DataTableInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.DataColumnInfo> ColumnsField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.DataInfo> RowsField;
        
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.DataColumnInfo> Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnsField, value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.DataInfo> Rows {
            get {
                return this.RowsField;
            }
            set {
                if ((object.ReferenceEquals(this.RowsField, value) != true)) {
                    this.RowsField = value;
                    this.RaisePropertyChanged("Rows");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataColumnInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    public partial class DataColumnInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        private string ColumnTitleField;
        
        private string DataTypeNameField;
        
        private int DisplayIndexField;
        
        private string EditControlTypeField;
        
        private bool IsKeyField;
        
        private bool IsReadOnlyField;
        
        private bool IsRequiredField;
        
        private int MaxLengthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnTitle {
            get {
                return this.ColumnTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnTitleField, value) != true)) {
                    this.ColumnTitleField = value;
                    this.RaisePropertyChanged("ColumnTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataTypeName {
            get {
                return this.DataTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeNameField, value) != true)) {
                    this.DataTypeNameField = value;
                    this.RaisePropertyChanged("DataTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DisplayIndex {
            get {
                return this.DisplayIndexField;
            }
            set {
                if ((this.DisplayIndexField.Equals(value) != true)) {
                    this.DisplayIndexField = value;
                    this.RaisePropertyChanged("DisplayIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditControlType {
            get {
                return this.EditControlTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EditControlTypeField, value) != true)) {
                    this.EditControlTypeField = value;
                    this.RaisePropertyChanged("EditControlType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsKey {
            get {
                return this.IsKeyField;
            }
            set {
                if ((this.IsKeyField.Equals(value) != true)) {
                    this.IsKeyField = value;
                    this.RaisePropertyChanged("IsKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly {
            get {
                return this.IsReadOnlyField;
            }
            set {
                if ((this.IsReadOnlyField.Equals(value) != true)) {
                    this.IsReadOnlyField = value;
                    this.RaisePropertyChanged("IsReadOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRequired {
            get {
                return this.IsRequiredField;
            }
            set {
                if ((this.IsRequiredField.Equals(value) != true)) {
                    this.IsRequiredField = value;
                    this.RaisePropertyChanged("IsRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxLength {
            get {
                return this.MaxLengthField;
            }
            set {
                if ((this.MaxLengthField.Equals(value) != true)) {
                    this.MaxLengthField = value;
                    this.RaisePropertyChanged("MaxLength");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    public partial class DataInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<string, object> DataRowField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, object> DataRow {
            get {
                return this.DataRowField;
            }
            set {
                if ((object.ReferenceEquals(this.DataRowField, value) != true)) {
                    this.DataRowField = value;
                    this.RaisePropertyChanged("DataRow");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PairRelation", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    public partial class PairRelation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Key1Field;
        
        private string Key2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key1 {
            get {
                return this.Key1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Key1Field, value) != true)) {
                    this.Key1Field = value;
                    this.RaisePropertyChanged("Key1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key2 {
            get {
                return this.Key2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Key2Field, value) != true)) {
                    this.Key2Field = value;
                    this.RaisePropertyChanged("Key2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISchemaService")]
    public interface ISchemaService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchemaService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISchemaService/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(System.Collections.ObjectModel.ObservableCollection<string> guids, System.AsyncCallback callback, object asyncState);
        
        SilverlightTestApplication.ServiceReference1.DataSetData EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchemaService/GetRelationUsingDataContract", ReplyAction="http://tempuri.org/ISchemaService/GetRelationUsingDataContractResponse")]
        System.IAsyncResult BeginGetRelationUsingDataContract(System.Collections.ObjectModel.ObservableCollection<string> guids, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> EndGetRelationUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISchemaService/LoadTypes", ReplyAction="http://tempuri.org/ISchemaService/LoadTypesResponse")]
        System.IAsyncResult BeginLoadTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> EndLoadTypes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchemaServiceChannel : SilverlightTestApplication.ServiceReference1.ISchemaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightTestApplication.ServiceReference1.DataSetData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightTestApplication.ServiceReference1.DataSetData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRelationUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRelationUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SchemaServiceClient : System.ServiceModel.ClientBase<SilverlightTestApplication.ServiceReference1.ISchemaService>, SilverlightTestApplication.ServiceReference1.ISchemaService {
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRelationUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetRelationUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetRelationUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadTypesDelegate;
        
        private EndOperationDelegate onEndLoadTypesDelegate;
        
        private System.Threading.SendOrPostCallback onLoadTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SchemaServiceClient() {
        }
        
        public SchemaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SchemaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchemaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchemaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<GetRelationUsingDataContractCompletedEventArgs> GetRelationUsingDataContractCompleted;
        
        public event System.EventHandler<LoadTypesCompletedEventArgs> LoadTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTestApplication.ServiceReference1.ISchemaService.BeginGetDataUsingDataContract(System.Collections.ObjectModel.ObservableCollection<string> guids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(guids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightTestApplication.ServiceReference1.DataSetData SilverlightTestApplication.ServiceReference1.ISchemaService.EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> guids = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((SilverlightTestApplication.ServiceReference1.ISchemaService)(this)).BeginGetDataUsingDataContract(guids, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            SilverlightTestApplication.ServiceReference1.DataSetData retVal = ((SilverlightTestApplication.ServiceReference1.ISchemaService)(this)).EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(System.Collections.ObjectModel.ObservableCollection<string> guids) {
            this.GetDataUsingDataContractAsync(guids, null);
        }
        
        public void GetDataUsingDataContractAsync(System.Collections.ObjectModel.ObservableCollection<string> guids, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        guids}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTestApplication.ServiceReference1.ISchemaService.BeginGetRelationUsingDataContract(System.Collections.ObjectModel.ObservableCollection<string> guids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRelationUsingDataContract(guids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> SilverlightTestApplication.ServiceReference1.ISchemaService.EndGetRelationUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetRelationUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetRelationUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> guids = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((SilverlightTestApplication.ServiceReference1.ISchemaService)(this)).BeginGetRelationUsingDataContract(guids, callback, asyncState);
        }
        
        private object[] OnEndGetRelationUsingDataContract(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> retVal = ((SilverlightTestApplication.ServiceReference1.ISchemaService)(this)).EndGetRelationUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRelationUsingDataContractCompleted(object state) {
            if ((this.GetRelationUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRelationUsingDataContractCompleted(this, new GetRelationUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRelationUsingDataContractAsync(System.Collections.ObjectModel.ObservableCollection<string> guids) {
            this.GetRelationUsingDataContractAsync(guids, null);
        }
        
        public void GetRelationUsingDataContractAsync(System.Collections.ObjectModel.ObservableCollection<string> guids, object userState) {
            if ((this.onBeginGetRelationUsingDataContractDelegate == null)) {
                this.onBeginGetRelationUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetRelationUsingDataContract);
            }
            if ((this.onEndGetRelationUsingDataContractDelegate == null)) {
                this.onEndGetRelationUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetRelationUsingDataContract);
            }
            if ((this.onGetRelationUsingDataContractCompletedDelegate == null)) {
                this.onGetRelationUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRelationUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetRelationUsingDataContractDelegate, new object[] {
                        guids}, this.onEndGetRelationUsingDataContractDelegate, this.onGetRelationUsingDataContractCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTestApplication.ServiceReference1.ISchemaService.BeginLoadTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> SilverlightTestApplication.ServiceReference1.ISchemaService.EndLoadTypes(System.IAsyncResult result) {
            return base.Channel.EndLoadTypes(result);
        }
        
        private System.IAsyncResult OnBeginLoadTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTestApplication.ServiceReference1.ISchemaService)(this)).BeginLoadTypes(callback, asyncState);
        }
        
        private object[] OnEndLoadTypes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> retVal = ((SilverlightTestApplication.ServiceReference1.ISchemaService)(this)).EndLoadTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadTypesCompleted(object state) {
            if ((this.LoadTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadTypesCompleted(this, new LoadTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadTypesAsync() {
            this.LoadTypesAsync(null);
        }
        
        public void LoadTypesAsync(object userState) {
            if ((this.onBeginLoadTypesDelegate == null)) {
                this.onBeginLoadTypesDelegate = new BeginOperationDelegate(this.OnBeginLoadTypes);
            }
            if ((this.onEndLoadTypesDelegate == null)) {
                this.onEndLoadTypesDelegate = new EndOperationDelegate(this.OnEndLoadTypes);
            }
            if ((this.onLoadTypesCompletedDelegate == null)) {
                this.onLoadTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadTypesCompleted);
            }
            base.InvokeAsync(this.onBeginLoadTypesDelegate, null, this.onEndLoadTypesDelegate, this.onLoadTypesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightTestApplication.ServiceReference1.ISchemaService CreateChannel() {
            return new SchemaServiceClientChannel(this);
        }
        
        private class SchemaServiceClientChannel : ChannelBase<SilverlightTestApplication.ServiceReference1.ISchemaService>, SilverlightTestApplication.ServiceReference1.ISchemaService {
            
            public SchemaServiceClientChannel(System.ServiceModel.ClientBase<SilverlightTestApplication.ServiceReference1.ISchemaService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetDataUsingDataContract(System.Collections.ObjectModel.ObservableCollection<string> guids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = guids;
                System.IAsyncResult _result = base.BeginInvoke("GetDataUsingDataContract", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightTestApplication.ServiceReference1.DataSetData EndGetDataUsingDataContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightTestApplication.ServiceReference1.DataSetData _result = ((SilverlightTestApplication.ServiceReference1.DataSetData)(base.EndInvoke("GetDataUsingDataContract", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRelationUsingDataContract(System.Collections.ObjectModel.ObservableCollection<string> guids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = guids;
                System.IAsyncResult _result = base.BeginInvoke("GetRelationUsingDataContract", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> EndGetRelationUsingDataContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation>)(base.EndInvoke("GetRelationUsingDataContract", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> EndLoadTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightTestApplication.ServiceReference1.PairRelation>)(base.EndInvoke("LoadTypes", _args, result)));
                return _result;
            }
        }
    }
}
